name: CI

on:
  pull_request:
    branches:
      - master
      - staging
      
  push:
    branches:
      - master
      - staging

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Decrypt .env
        run: npx dotenvx decrypt --key ${{ secrets.DOTENV_KEY }}

      - name: Run lint
        run: pnpm lint

  test:
    name: Test & Coverage
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Fetch base branch
        run: git fetch origin ${{ github.base_ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Decrypt .env
        run: npx dotenvx decrypt --key ${{ secrets.DOTENV_KEY }}

      - name: Run tests with coverage
        run: |
          pnpm jest --coverage --detectOpenHandles --changedSince=origin/${{ github.base_ref }} \
          --ci --reporters=default --reporters=jest-junit \
          || pnpm jest --coverage --detectOpenHandles \
          --ci --reporters=default --reporters=jest-junit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/coverage-final.json,./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          verbose: true
      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Generate coverage summary for GitHub
        if: always()
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            echo "## 📊 Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # Extract coverage percentages
            LINES=$(node -p "require('./coverage/coverage-summary.json').total.lines.pct")
            STATEMENTS=$(node -p "require('./coverage/coverage-summary.json').total.statements.pct")
            FUNCTIONS=$(node -p "require('./coverage/coverage-summary.json').total.functions.pct")
            BRANCHES=$(node -p "require('./coverage/coverage-summary.json').total.branches.pct")
            
            echo "| Metric | Coverage |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|----------|" >> $GITHUB_STEP_SUMMARY
            echo "| Lines | ${LINES}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Statements | ${STATEMENTS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Functions | ${FUNCTIONS}% |" >> $GITHUB_STEP_SUMMARY
            echo "| Branches | ${BRANCHES}% |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📄 Full report available in artifacts below" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Set PR metadata
        if: github.event_name == 'pull_request'
        run: |
          echo "CC_PR=${{ github.event.pull_request.number }}" >> $GITHUB_ENV
          echo "CC_BRANCH=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "Branch: ${{ github.head_ref }}"

      - name: Upload coverage artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 30

      - name: Check coverage threshold
        run: |
          if [ -f coverage/coverage-summary.json ]; then
            COVERAGE=$(node -p "
              const coverage = require('./coverage/coverage-summary.json');
              const total = coverage.total;
              Math.min(
                total.lines.pct,
                total.statements.pct,
                total.functions.pct,
                total.branches.pct
              ).toFixed(2);
            ")
            echo "Minimum coverage: $COVERAGE%"
            
            THRESHOLD=70
            if (( $(echo "$COVERAGE < $THRESHOLD" | bc -l) )); then
              echo "❌ Coverage $COVERAGE% is below threshold $THRESHOLD%"
              exit 1
            else
              echo "✅ Coverage $COVERAGE% meets threshold $THRESHOLD%"
            fi
          fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.19.0

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.15.0

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - name: Install dependencies
        run: pnpm install

      - name: Decrypt .env
        run: npx dotenvx decrypt --key ${{ secrets.DOTENV_KEY }}

      - name: Build project
        run: pnpm build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build
          path: dist/
          retention-days: 7